mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

mat3 rotateZ(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, -s, 0),
        vec3(s, c, 0),
        vec3(0, 0, 1)
    );
}

float pi = 3.14159265358979323;

uint hash(inout uint seed) {
    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float randF (inout uint state) {
    return float(hash(state)) / 4294967296.0;
}

vec2 rand2F (inout uint state) {
    float a = randF(state);
    float b = randF(state);
    return vec2(a, b);
}
 
vec3 randV (inout uint state) {
    float z = randF(state) * 2.0f - 1.0f;
    float a = randF(state) * pi * 2.0;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

vec3 cosineDir (vec3 norm, inout uint rand) {
    return normalize(norm + randV(rand));
}

vec4 QuaternionMultiply(vec4 a, vec4 b) {
    return vec4(
        a.x * b.w + a.y * b.z - a.z * b.y + a.w * b.x,
        -a.x * b.z + a.y * b.w + a.z * b.x + a.w * b.y,
        a.x * b.y - a.y * b.x + a.z * b.w + a.w * b.z,
        -a.x * b.x - a.y * b.y - a.z * b.z + a.w * b.w
    );
}

vec3 Rotate(vec3 vec, vec3 from, vec3 to) {
    vec3 halfway = normalize(from + to);
    vec4 quat = vec4(cross(from, halfway), dot(from, halfway));
    vec4 qInv = vec4(-quat.xyz, quat.w);
    return QuaternionMultiply(QuaternionMultiply(quat, vec4(vec, 0)), qInv).xyz;
}

vec3 coneDir(vec3 vector, inout uint rand, float angle) {
    vec2 xy = rand2F(rand);
    xy.x *= radians(360.0);
    float cosAngle = cos(angle);
    xy.y = xy.y * (1.0 - cosAngle) + cosAngle;
    vec3 sphereCap = vec3(vec2(cos(xy.x), sin(xy.x)) * sqrt(1.0 - xy.y * xy.y), xy.y);
    return Rotate(sphereCap, vec3(0, 0, 1), vector);
}

float normdist (float x, float mean, float dev) {
    return (1.0 / (dev * sqrt(2.0 * pi))) * exp(-0.5 * pow((x - mean) / dev, 2.0));
}

//From Jessie
float PreethamBetaO_Fit(float wavelength) {
    wavelength -= 390.0;
    float p1 = normdist(wavelength, 202.0, 15.0) * 14.4;
    float p2 = normdist(wavelength, 170.0, 10.0) * 6.5;
    float p3 = normdist(wavelength, 50.0, 20.0) * 3.0;
    float p4 = normdist(wavelength, 100.0, 25.0) * 7.0;
    float p5 = normdist(wavelength, 140.0, 30.0) * 20.0;
    float p6 = normdist(wavelength, 150.0, 10.0) * 3.0;
    float p7 = normdist(wavelength, 290.0, 30.0) * 12.0;
    float p8 = normdist(wavelength, 330.0, 80.0) * 10.0;
    float p9 = normdist(wavelength, 240.0, 20.0) * 13.0;
    float p10 = normdist(wavelength, 220.0, 10.0) * 2.0;
    float p11 = normdist(wavelength, 186.0, 8.0) * 1.3;
    return 0.0001 * ((p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10 + p11) / 1e20);
}

const float turbidity = 1.2;

float BetaM(in float wavelength) {
    const float junge = 4.0;

    float c = (0.6544 * turbidity - 0.6510) * 4e-18;
    float K = (0.773335 - 0.00386891 * wavelength) / (1.0 - 0.00546759 * wavelength);
    return 0.434 * c * pi * pow(2.0 * pi / (wavelength * 1e-9), junge - 2.0) * K;
}

float Air(in float wavelength) {
    return 1.0+8.06051E-5+2.480990E-2/(132.274-pow(wavelength,-2.0))+1.74557E-4/(39.32957-pow(wavelength,-2.0));
}

float BetaR(in float wavelength) {
    float nanometers = wavelength * 1e-9;

    float F_N2 = 1.034 + 3.17e-4 * (1.0 / pow(wavelength, 2.0));
    float F_O2 = 1.096 + 1.385e-3 * (1.0 / pow(wavelength, 2.0)) + 1.448e-4 * (1.0 / pow(wavelength, 4.0));
    float CCO2 = 0.045;
    float kingFactor = (78.084 * F_N2 + 20.946 * F_O2 + 0.934 + CCO2 * 1.15) / (78.084 + 20.946 + 0.934 + CCO2);
    float n = pow(Air(wavelength * 1e-3), 2.0) - 1.0;

    return ((8.0 * pow(pi, 3.0) * pow(n, 2.0)) / (3.0 * 2.5035422e25 * pow(nanometers, 4.0))) * kingFactor;
}

vec2 RSI (vec3 ro, vec3 rd, vec4 sph) {
    ro = ro - sph.xyz;
    float a = sph.a * sph.a;
    float b = dot(ro, rd);
    float c = b * b + a - dot(ro, ro);

    if (c < 0.0) return vec2(-1.0);

    c = sqrt(c);
    return -b + vec2(-c, c);
}

float plancks (float wl, float temp) {
    const float h = 6.62607015e-16;
    const float c = 2.99792458e17;
    const float k = 1.380649e-5;

    float p1 = 2.0 * h * pow(c, 2.0) * pow(wl, -5.0);
    float p2 = exp((h * c) / (wl * k * temp)) - 1.0;

    return p1 / p2;
}

#define WL_START   380.
#define WL_SAMPLES 340

vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), vec3(0.003769647,0.0004146161,0.0184726), vec3(0.004532416,0.0005028333,0.02221101), vec3(0.005446553,0.0006084991,0.02669819), vec3(0.006538868,0.0007344436,0.03206937), vec3(0.007839699,0.0008837389,0.03847832), vec3(0.009382967,0.001059646,0.04609784), vec3(0.01120608,0.001265532,0.05511953), vec3(0.01334965,0.001504753,0.06575257), vec3(0.0158569,0.001780493,0.07822113), vec3(0.01877286,0.002095572,0.09276013), vec3(0.02214302,0.002452194,0.109609), vec3(0.02601285,0.002852216,0.1290077), vec3(0.03043036,0.003299115,0.1512047), vec3(0.03544325,0.003797466,0.1764441), vec3(0.0410964,0.004352768,0.2049517), vec3(0.04742986,0.004971717,0.2369246), vec3(0.05447394,0.005661014,0.2725123), vec3(0.06223612,0.006421615,0.311782), vec3(0.07070048,0.007250312,0.3547064), vec3(0.07982513,0.008140173,0.4011473), vec3(0.08953803,0.00907986,0.4508369), vec3(0.09974848,0.01005608,0.5034164), vec3(0.1104019,0.01106456,0.5586361), vec3(0.1214566,0.01210522,0.6162734), vec3(0.1328741,0.01318014,0.6760982), vec3(0.1446214,0.01429377,0.7378822), vec3(0.1566468,0.01545004,0.8013019), vec3(0.1687901,0.01664093,0.8655573), vec3(0.1808328,0.01785302,0.9295791), vec3(0.1925216,0.01907018,0.9921293), vec3(0.2035729,0.02027369,1.051821), vec3(0.2137531,0.02144805,1.107509), vec3(0.2231348,0.02260041,1.159527), vec3(0.2319245,0.02374789,1.208869), vec3(0.2403892,0.02491247,1.256834), vec3(0.2488523,0.02612106,1.305008), vec3(0.2575896,0.02739923,1.354758), vec3(0.2664991,0.02874993,1.405594), vec3(0.2753532,0.03016909,1.456414), vec3(0.2838921,0.03165145,1.50596), vec3(0.2918246,0.03319038,1.552826), vec3(0.29892,0.03477912,1.595902), vec3(0.3052993,0.03641495,1.635768), vec3(0.3112031,0.03809569,1.673573), vec3(0.3169047,0.03981843,1.710604), vec3(0.3227087,0.0415794,1.74828), vec3(0.3288194,0.04337098,1.787504), vec3(0.3349242,0.0451718,1.826609), vec3(0.3405452,0.0469542,1.863108), vec3(0.3451688,0.04868718,1.894332), vec3(0.3482554,0.05033657,1.917479), vec3(0.3494153,0.05187611,1.930529), vec3(0.3489075,0.05332218,1.934819), vec3(0.3471746,0.05470603,1.93265), vec3(0.3446705,0.05606335,1.926395), vec3(0.3418483,0.05743393,1.918437), vec3(0.339024,0.05885107,1.91043), vec3(0.3359926,0.06030809,1.901224), vec3(0.3324276,0.06178644,1.889), vec3(0.3280157,0.0632657,1.871996), vec3(0.3224637,0.06472352,1.848545), vec3(0.3156225,0.06614749,1.817792), vec3(0.3078201,0.06757256,1.781627), vec3(0.2994771,0.06904928,1.742514), vec3(0.2909776,0.0706328,1.702749), vec3(0.2826646,0.07238339,1.664439), vec3(0.2747962,0.0743596,1.629207), vec3(0.2674312,0.07659383,1.59736), vec3(0.2605847,0.07911436,1.568896), vec3(0.2542749,0.08195345,1.543823), vec3(0.2485254,0.08514816,1.522157), vec3(0.2433039,0.08872657,1.503611), vec3(0.2383414,0.09266008,1.486673), vec3(0.2333253,0.09689723,1.469595), vec3(0.2279619,0.1013746,1.450709), vec3(0.2219781,0.1060145,1.42844), vec3(0.2151735,0.1107377,1.401587), vec3(0.2075619,0.1155111,1.370094), vec3(0.1992183,0.1203122,1.33422), vec3(0.190229,0.1251161,1.294275), vec3(0.1806905,0.1298957,1.25061), vec3(0.1707154,0.1346299,1.203696), vec3(0.1604471,0.1393309,1.154316), vec3(0.1500244,0.1440235,1.103284), vec3(0.1395705,0.1487372,1.051347), vec3(0.129192,0.1535066,0.9991789), vec3(0.1189859,0.1583644,0.9473958), vec3(0.1090615,0.1633199,0.8966222), vec3(0.09951424,0.1683761,0.8473981), vec3(0.0904185,0.1735365,0.8001576), vec3(0.08182895,0.1788048,0.7552379), vec3(0.07376817,0.1841819,0.7127879), vec3(0.06619477,0.1896559,0.6725198), vec3(0.0590638,0.1952101,0.6340976), vec3(0.05234242,0.2008259,0.5972433), vec3(0.04600865,0.2064828,0.5617313), vec3(0.04006154,0.2121826,0.5274921), vec3(0.03454373,0.2180279,0.4948809), vec3(0.02949091,0.2241586,0.4642586), vec3(0.0249214,0.2307302,0.4358841), vec3(0.02083981,0.237916,0.4099313), vec3(0.01723591,0.2458706,0.3864261), vec3(0.01407924,0.2546023,0.3650566), vec3(0.01134516,0.264076,0.3454812), vec3(0.009019658,0.274249,0.3274095), vec3(0.007097731,0.285068,0.3105939), vec3(0.005571145,0.2964837,0.2948102), vec3(0.004394566,0.308501,0.2798194), vec3(0.003516303,0.3211393,0.26541), vec3(0.002887638,0.3344175,0.2514084), vec3(0.002461588,0.3483536,0.2376753), vec3(0.002206348,0.3629601,0.2241211), vec3(0.002149559,0.3782275,0.2107484), vec3(0.002337091,0.3941359,0.1975839), vec3(0.002818931,0.4106582,0.1846574), vec3(0.003649178,0.4277595,0.1720018), vec3(0.004891359,0.4453993,0.1596918), vec3(0.006629364,0.4635396,0.1479415), vec3(0.008942902,0.4821376,0.1369428), vec3(0.01190224,0.501143,0.1268279), vec3(0.01556989,0.5204972,0.1176796), vec3(0.01997668,0.5401387,0.109497), vec3(0.02504698,0.5600208,0.1020943), vec3(0.0306753,0.5800972,0.09527993), vec3(0.03674999,0.6003172,0.08890075), vec3(0.04315171,0.6206256,0.08283548), vec3(0.04978584,0.6409398,0.07700982), vec3(0.05668554,0.6610772,0.07144001), vec3(0.06391651,0.6808134,0.06615436), vec3(0.07154352,0.6999044,0.06117199), vec3(0.07962917,0.718089,0.05650407), vec3(0.08821473,0.7351593,0.05215121), vec3(0.09726978,0.7511821,0.04809566), vec3(0.1067504,0.7663143,0.0443172), vec3(0.1166192,0.7807352,0.04079734), vec3(0.1268468,0.7946448,0.03751912), vec3(0.137406,0.8082074,0.03446846), vec3(0.1482471,0.8213817,0.03163764), vec3(0.1593076,0.8340701,0.02901901), vec3(0.1705181,0.8461711,0.02660364), vec3(0.1818026,0.8575799,0.02438164), vec3(0.193109,0.8682408,0.02234097), vec3(0.2045085,0.8783061,0.02046415), vec3(0.2161166,0.8879907,0.01873456), vec3(0.228065,0.8975211,0.01713788), vec3(0.2405015,0.9071347,0.01566174), vec3(0.2535441,0.9169947,0.01429644), vec3(0.26713,0.9269295,0.01303702), vec3(0.2811351,0.9366731,0.01187897), vec3(0.2954164,0.9459482,0.01081725), vec3(0.3098117,0.9544675,0.00984647), vec3(0.3241678,0.9619834,0.008960687), vec3(0.3384319,0.968439,0.008152811), vec3(0.3525786,0.9738289,0.007416025), vec3(0.3665839,0.9781519,0.006744115), vec3(0.3804244,0.9814106,0.006131421), vec3(0.3940988,0.9836669,0.005572778), vec3(0.4076972,0.9852081,0.005063463), vec3(0.4213484,0.9863813,0.004599169), vec3(0.4352003,0.9875357,0.004175971), vec3(0.4494206,0.9890228,0.003790291), vec3(0.4641616,0.9910811,0.003438952), vec3(0.4794395,0.9934913,0.003119341), vec3(0.495218,0.9959172,0.002829038), vec3(0.5114395,0.9980205,0.002565722), vec3(0.5280233,0.9994608,0.002327186), vec3(0.5448696,0.999993,0.00211128), vec3(0.5618898,0.9997557,0.001915766), vec3(0.5790137,0.9989839,0.001738589), vec3(0.5961882,0.9979123,0.00157792), vec3(0.6133784,0.9967737,0.001432128), vec3(0.6305897,0.9957356,0.001299781), vec3(0.6479223,0.9947115,0.001179667), vec3(0.6654866,0.9935534,0.001070694), vec3(0.6833782,0.9921156,0.0009718623), vec3(0.7016774,0.9902549,0.0008822531), vec3(0.720411,0.9878596,0.0008010231), vec3(0.7394495,0.9849324,0.0007273884), vec3(0.7586285,0.9815036,0.0006606347), vec3(0.7777885,0.9776035,0.0006001146), vec3(0.796775,0.9732611,0.0005452416), vec3(0.815453,0.9684764,0.0004954847), vec3(0.8337389,0.9631369,0.0004503642), vec3(0.8515493,0.9571062,0.0004094455), vec3(0.8687862,0.950254,0.0003723345), vec3(0.8853376,0.9424569,0.0003386739), vec3(0.9011588,0.9336897,0.0003081396), vec3(0.9165278,0.9242893,0.000280437), vec3(0.9318245,0.9146707,0.0002552996), vec3(0.9474524,0.9052333,0.0002324859), vec3(0.9638388,0.8963613,0.0002117772), vec3(0.9812596,0.8883069,0.0001929758), vec3(0.9992953,0.8808462,0.0001759024), vec3(1.017343,0.8736445,0.0001603947), vec3(1.03479,0.8663755,0.0001463059), vec3(1.051011,0.8587203,0.0001335031), vec3(1.065522,0.8504295,0.000121866), vec3(1.078421,0.8415047,0.0001112857), vec3(1.089944,0.8320109,0.0001016634), vec3(1.10032,0.8220154,9.291003e-05), vec3(1.109767,0.8115868,8.494468e-05), vec3(1.118438,0.8007874,7.769425e-05), vec3(1.126266,0.7896515,7.109247e-05), vec3(1.133138,0.7782053,6.507936e-05), vec3(1.138952,0.7664733,5.960061e-05), vec3(1.14362,0.7544785,5.460706e-05), vec3(1.147095,0.7422473,5.005417e-05), vec3(1.149464,0.7298229,4.590157e-05), vec3(1.150838,0.7172525,4.211268e-05), vec3(1.151326,0.7045818,3.865437e-05), vec3(1.151033,0.6918553,3.549661e-05), vec3(1.150002,0.6791009,3.26122e-05), vec3(1.148061,0.6662846,2.997643e-05), vec3(1.144998,0.6533595,2.756693e-05), vec3(1.140622,0.6402807,2.536339e-05), vec3(1.134757,0.6270066,2.334738e-05), vec3(1.127298,0.6135148,2.150221e-05), vec3(1.118342,0.5998494,1.981268e-05), vec3(1.108033,0.5860682,1.8265e-05), vec3(1.096515,0.5722261,1.684667e-05), vec3(1.083928,0.5583746,1.554631e-05), vec3(1.070387,0.5445535,1.43536e-05), vec3(1.055934,0.5307673,1.325915e-05), vec3(1.040592,0.517013,1.225443e-05), vec3(1.024385,0.5032889,1.133169e-05), vec3(1.007344,0.489595,1.048387e-05), vec3(0.9895268,0.4759442,0.0), vec3(0.9711213,0.4623958,0.0), vec3(0.9523257,0.4490154,0.0), vec3(0.9333248,0.4358622,0.0), vec3(0.9142877,0.4229897,0.0), vec3(0.8952798,0.4104152,0.0), vec3(0.8760157,0.3980356,0.0), vec3(0.8561607,0.38573,0.0), vec3(0.8354235,0.3733907,0.0), vec3(0.8135565,0.3609245,0.0), vec3(0.7904565,0.348286,0.0), vec3(0.7664364,0.3355702,0.0), vec3(0.7418777,0.3228963,0.0), vec3(0.7171219,0.3103704,0.0), vec3(0.6924717,0.2980865,0.0), vec3(0.66816,0.286116,0.0), vec3(0.6442697,0.2744822,0.0), vec3(0.620845,0.2631953,0.0), vec3(0.5979243,0.2522628,0.0), vec3(0.575541,0.2416902,0.0), vec3(0.5537296,0.2314809,0.0), vec3(0.5325412,0.2216378,0.0), vec3(0.5120218,0.2121622,0.0), vec3(0.492207,0.2030542,0.0), vec3(0.4731224,0.1943124,0.0), vec3(0.4547417,0.1859227,0.0), vec3(0.4368719,0.1778274,0.0), vec3(0.4193121,0.1699654,0.0), vec3(0.401898,0.1622841,0.0), vec3(0.3844986,0.1547397,0.0), vec3(0.3670592,0.1473081,0.0), vec3(0.3497167,0.1400169,0.0), vec3(0.3326305,0.1329013,0.0), vec3(0.3159341,0.1259913,0.0), vec3(0.2997374,0.119312,0.0), vec3(0.2841189,0.112882,0.0), vec3(0.2691053,0.1067113,0.0), vec3(0.2547077,0.1008052,0.0), vec3(0.2409319,0.09516653,0.0), vec3(0.2277792,0.08979594,0.0), vec3(0.2152431,0.08469044,0.0), vec3(0.203301,0.07984009,0.0), vec3(0.1919276,0.07523372,0.0), vec3(0.1810987,0.07086061,0.0), vec3(0.1707914,0.06671045,0.0), vec3(0.1609842,0.0627736,0.0), vec3(0.1516577,0.05904179,0.0), vec3(0.1427936,0.05550703,0.0), vec3(0.1343737,0.05216139,0.0), vec3(0.1263808,0.04899699,0.0), vec3(0.1187979,0.04600578,0.0), vec3(0.1116088,0.04317885,0.0), vec3(0.1047975,0.04050755,0.0), vec3(0.09834835,0.03798376,0.0), vec3(0.09224597,0.03559982,0.0), vec3(0.08647506,0.03334856,0.0), vec3(0.08101986,0.03122332,0.0), vec3(0.07586514,0.0292178,0.0), vec3(0.07099633,0.02732601,0.0), vec3(0.0663996,0.02554223,0.0), vec3(0.06206225,0.02386121,0.0), vec3(0.05797409,0.02227859,0.0), vec3(0.05412533,0.0207902,0.0), vec3(0.050506,0.01939185,0.0), vec3(0.04710606,0.01807939,0.0), vec3(0.04391411,0.01684817,0.0), vec3(0.04091411,0.01569188,0.0), vec3(0.03809067,0.01460446,0.0), vec3(0.03543034,0.01358062,0.0), vec3(0.03292138,0.01261573,0.0), vec3(0.03055672,0.01170696,0.0), vec3(0.02834146,0.01085608,0.0), vec3(0.02628033,0.01006476,0.0), vec3(0.02437465,0.009333376,0.0), vec3(0.02262306,0.008661284,0.0), vec3(0.02101935,0.008046048,0.0), vec3(0.01954647,0.00748113,0.0), vec3(0.01818727,0.006959987,0.0), vec3(0.01692727,0.00647707,0.0), vec3(0.01575417,0.006027677,0.0), vec3(0.01465854,0.005608169,0.0), vec3(0.01363571,0.005216691,0.0), vec3(0.01268205,0.004851785,0.0), vec3(0.01179394,0.004512008,0.0), vec3(0.01096778,0.004195941,0.0), vec3(0.01019964,0.003902057,0.0), vec3(0.009484317,0.003628371,0.0), vec3(0.008816851,0.003373005,0.0), vec3(0.008192921,0.003134315,0.0), vec3(0.00760875,0.002910864,0.0), vec3(0.007061391,0.002701528,0.0), vec3(0.006549509,0.002505796,0.0), vec3(0.00607197,0.002323231,0.0), vec3(0.005627476,0.002153333,0.0), vec3(0.005214608,0.001995557,0.0), vec3(0.004831848,0.001849316,0.0), vec3(0.004477579,0.001713976,0.0), vec3(0.004150166,0.001588899,0.0), vec3(0.003847988,0.001473453,0.0), vec3(0.003569452,0.001367022,0.0), vec3(0.003312857,0.001268954,0.0), vec3(0.003076022,0.001178421,0.0), vec3(0.002856894,0.001094644,0.0), vec3(0.002653681,0.001016943,0.0));


int wlidx(in float wl) {
    return int(wl - WL_START);
}

const mat3 xyz_to_rgb = mat3(
        vec3( 3.2406, -0.9689,  0.0557),
        vec3(-1.5372,  1.8758, -0.2040),
        vec3(-0.4986,  0.0415,  1.0570));
        
mat3 rgb_to_xyz = inverse(xyz_to_rgb);

vec3 spectral(float wl) {
    int idx = wlidx(wl);
    return xyz_to_rgb * xyz_bar[idx];
}